# DETECT A CYCLE IN A LINKED LIST
# 
# Given head, the head of a linked list,
# determine if the linked list has a cycle in it.
# There is a cycle in a linked list if there is some
# node in the list that can be reached again by
# continuously following the next pointer.
# Internally, pos is used to denote the index of the
# node that tail's next pointer is connected to.
# Note that pos is not passed as a parameter.
# Return true if there is a cycle in the linked list.
# Otherwise, return false.

inc lib.List;

HasCycle(nodes)
{
    walker := nodes;
    runner := nodes;
    while(true)
    {
        if(runner@next == null)
        {
            break;
        }
        if(runner@next@next == null)
        {
            break;
        }
        walker = walker@next;
        runner = runner@next@next;
        if(walker == runner)
        {
            ret true;
        }
    }
    ret false;
}

Nodes()
{
    nodes := List_Node(1);
    List_Push(nodes, List_Node(2));
    loop := nodes;
    List_Push(nodes, List_Node(3));
    List_Push(nodes, List_Node(4));
    List_Push(nodes, List_Node(5));
    List_Push(nodes, List_Node(6));
    List_Push(nodes, List_Node(7));
    List_Push(nodes, loop);
    ret nodes;
}

Main()
{
    Assert(HasCycle(Nodes()));
    ret 0;
}
