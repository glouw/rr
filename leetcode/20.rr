# PACIFIC ATLANTIC WATER FLOW
#
# There is an m x n rectangular island that borders
# both the Pacific Ocean and Atlantic Ocean. The Pacific
# Ocean touches the island's left and top edges, and the
# Atlantic Ocean touches the island's right and bottom edges.
# 
# The island is partitioned into a grid of square cells.
# You are given an m x n integer matrix heights where
# heights[r][c] represents the height above sea level of
# the cell at coordinate (r, c).
# 
# The island receives a lot of rain, and the rain water can flow
# to neighboring cells directly north, south, east, and west if
# the neighboring cell's height is less than or equal to the current
# cell's height. Water can flow from any cell adjacent to
# an ocean into the ocean.
# 
# Return a 2D list of grid coordinates result where
# result[i] = [ri, ci] denotes that rain water can flow
# from cell (ri, ci) to both the Pacific and Atlantic oceans.

Dimensions(height)
{
    ret {
        .rows : Len(height),
        .cols : Len(height[0]),
    };
}

Get(height, point)
{
    ret height[point.row][point.col];
}

OnGrid(height, point)
{
    dims := Dimensions(height);
    ret (point.row >= 0) && (point.row < dims.rows)
     && (point.col >= 0) && (point.col < dims.cols);
}

IsPac(height, point)
{
    ret (point.col == 0)
     || (point.row == 0);
}

IsAtl(height, point)
{
    dims := Dimensions(height);
    ret (point.col == dims.cols - 1)
     || (point.row == dims.rows - 1);
}

CanFlow(height, a, b)
{
    ret Get(height, a) - Get(height, b) >= 0;
}

Point(row, col)
{
    ret {
        .row : row,
        .col : col,
    };
}

Point_Add(a, b)
{
    ret Point(
        a.row + b.row,
        a.col + b.col);
}

Point_Sub(a, b)
{
    ret Point(
        a.row - b.row,
        a.col - b.col);
}

Goal()
{
    ret {
        .pac : false,
        .atl : false,
    };
}

Goal_Seek(self, height, now, from)
{
    if(IsPac(height, now)) { self.pac = true; }
    if(IsAtl(height, now)) { self.atl = true; }
    N := Point_Add(now, Point( 1,  0));
    E := Point_Add(now, Point( 0,  1));
    S := Point_Add(now, Point(-1,  0));
    W := Point_Add(now, Point( 0, -1));
    if(OnGrid(height, N) && (N != from)) { if(CanFlow(height, now, N)) { Goal_Seek(self, height, N, now); } }
    if(OnGrid(height, E) && (E != from)) { if(CanFlow(height, now, E)) { Goal_Seek(self, height, E, now); } }
    if(OnGrid(height, S) && (S != from)) { if(CanFlow(height, now, S)) { Goal_Seek(self, height, S, now); } }
    if(OnGrid(height, W) && (W != from)) { if(CanFlow(height, now, W)) { Goal_Seek(self, height, W, now); } }
}

Try(height, point)
{
    goal := Goal();
    Goal_Seek(goal, height, point, point);
    ret goal;
}

Test(height)
{
    valid := [];
    dim := Dimensions(height);
    for(row := 0; row < dim.rows; row += 1) {
    for(col := 0; col < dim.cols; col += 1) {
        goal := Try(height, Point(row, col));
        if(goal.atl && goal.pac)
        {
            valid += [ [row, col] ];
        }
    }}
    ret valid;
}

Main()
{
    Assert(Test([
        [1, 2, 2, 3, 5],
        [3, 2, 3, 4, 4],
        [2, 4, 5, 3, 1],
        [6, 7, 1, 4, 5],
        [5, 1, 1, 2, 4]
        ]) == [
            [0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]
        ]);
    Assert(Test([
        [2, 1],
        [1, 2],
        ]) == [
            [0, 0], [0, 1], [1, 0], [1, 1]
        ]);
    ret 0;
}
