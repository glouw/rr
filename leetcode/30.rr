# SUBTREE OF ANOTHER TREE
# 
# Given the roots of two binary trees root and subRoot,
# return true if there is a subtree of root with the same
# structure and node values of subRoot and false otherwise.
# 
# A subtree of a binary tree tree is a tree that consists
# of a node in tree and all of this node's descendants.
# The tree tree could also be considered as a subtree of itself.

inc lib.Tree;

Build()
{
    a := Tree_Node(1);
    a@l := Tree_Node(1);
    a@r := Tree_Node(2);
    a@r@r := Tree_Node(3);
    a@r@l := Tree_Node(4);
    b := Tree_Node(2);
    b@r := Tree_Node(3);
    b@l := Tree_Node(4);
    ret {
        .a : a,
        .b : b,
    };
}

IsSub(a, b)
{
    if(a != null)
    {
        if(a@value == b@value)
        {
            if(Tree_Same(a, b))
            {
                ret true;
            }
        }
        ret IsSub(a@l, b) || IsSub(a@r, b);
    }
    ret false;
}

Main()
{
    nodes := Build();
    Assert(IsSub(nodes.a, nodes.b));
    ret 0;
}
