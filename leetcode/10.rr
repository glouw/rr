# ------------------------------
# String to Integer (atoi) 
# ------------------------------
#
# Implement atoi to convert a string to an integer.

Space := { " ", "\n", "\t" };

ToInt := {
    "0" : 0,
    "1" : 1,
    "2" : 2,
    "3" : 3,
    "4" : 4,
    "5" : 5,
    "6" : 6,
    "7" : 7,
    "8" : 8,
    "9" : 9,
};

IsNum(char)
{
    ret ToInt[char] != null;
}

IsSpace(char)
{
    ret Space[char] != null;
}

Clamped(integer)
{
    max := +2147483647;
    min := -2147483648;
    if(integer > max) { ret max; }
    if(integer < min) { ret min; }
    ret integer;
}

Atoi(s)
{
    if(Len(s) == 0)
    {
        Print("warning: input string was empty");
        ret 0;
    }
    temp := s;
    integer := 0;
    indexed := 0;
    negated := false;
    positived := false;
    while(Len(temp) > 0)
    {
        char := temp[-1];
        if(IsSpace(char))
        {
            # Nothing to do - advance;
        }
        elif(IsNum(char))
        {
            if(negated)
            {
                Print("warning: stray negative found before character `{}`" % [char]);
                ret 0;
            }
            if(positived)
            {
                Print("warning: stray positive found before character `{}`" % [char]);
                ret 0;
            }
            integer += ToInt[char] * (10 ** indexed);
            indexed += 1;
        }
        elif(char == "-")
        {
            if(negated)
            {
                Print("warning: extra negative found before character `{}`" % [char]);
                ret 0;
            }
            integer *= -1;
            negated = true;
        }
        elif(char == "+")
        {
            if(positived)
            {
                Print("warning: extra positive found before character `{}`" % [char]);
                ret 0;
            }
            positived = true;
        }
        else
        {
            Print("warning: unknown character `{}` found" % [char]);
            ret 0;
        }
        Del(temp, -1);
    }
    Print("INTEGER {}" % [integer]);
    ret Clamped(integer);
}

Main()
{
    Assert(Atoi(" - 21342 ") == -21342);
    Assert(Atoi(" + 21342 ") == +21342);
    Assert(Atoi("123") == 123);
    Assert(Atoi("") == 0);
    Assert(Atoi(" ++ 21342 ") == 0);
    Assert(Atoi(" -- 21342 ") == 0);
    Assert(Atoi(" 21342 + ") == 0);
    Assert(Atoi(" 21342 ++ ") == 0);
    Assert(Atoi(" 213++42 ") == 0);
    Assert(Atoi(" 213+42 ") == 0);
    Assert(Atoi(" 213--42 ") == 0);
    Assert(Atoi(" 213-42 ") == 0);
    Assert(Atoi(" 213-42 ") == 0);
    Assert(Atoi("2147483647") == 2147483647);
    Assert(Atoi("-2147483648") == -2147483648); 
    Assert(Atoi("3147483647") == 2147483647);
    Assert(Atoi("-3147483648") == -2147483648); 
    Assert(Atoi("11111111111111111111112222223147483647") == 2147483647);
    Assert(Atoi("-11111111111111111111112222223147483648") == -2147483648); 
    ret 0;
}
