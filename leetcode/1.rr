# ------------------------------
# Single Element in a Sorted Array 
# ------------------------------
# 
# Given a sorted array consisting of only integers where
# every element appears twice except for one element which
# appears once.
#
# Find this single element that appears only once. 
# 
# Your solution should run in O(log n) time and O(1) space.

IsEven(n)
{ 
    ret (Floor(n) % 2) == 0;
}

IsOdd(n)
{
    ret !IsEven(n);
}

Mid(l, r)
{
    ret l + (r - l) / 2;
}

FindRecursive(arr, l, r)
{
    if(l <= r)
    {
        if(l == r)
        {
            ret arr[l];
        }
        m := Mid(l, r);
        if(IsEven(m))
        {
            if(arr[m] == arr[m + 1])
            {
                ret FindRecursive(arr, m + 1, r);
            }
            else
            {
                ret FindRecursive(arr, l, m);
            }
        }
        else
        {
            if(arr[m] == arr[m + 1])
            {
                ret FindRecursive(arr, l, m);
            }
            else
            {
                ret FindRecursive(arr, m + 1, r);
            }
        }
    }
    else
    {
        ret -1;
    }
}

Find(arr, l, r)
{
    while(true)
    {
        if(l > r)
        {
            break;
        }
        m := Mid(l, r);
        if(l == r)
        {
            ret arr[m];
        }
        if(IsEven(m))
        {
            if(arr[m] == arr[m + 1])
            {
                l = m + 1;
            }
            else
            {
                r = m;
            }
        }
        else
        {
            if(arr[m] == arr[m + 1])
            {
                r = m;
            }
            else
            {
                l = m + 1;
            }
        }
    }
    ret -1;
}

Helper(func, queue)
{
    ret func(queue, 0, Len(queue) - 1);
}

Main()
{
    Assert( 2 == Helper(Find,          [1, 1, 2,  3,  3,  4,  4, 8, 8]));
    Assert(10 == Helper(Find,          [3, 3, 7,  7, 10, 11, 11]      ));
    Assert( 7 == Helper(Find,          [3, 3, 7, 10, 10, 11, 11]      ));
    Assert( 7 == Helper(Find,          [3, 3, 7,  9,  9]              ));
    Assert( 7 == Helper(Find,          [3, 3, 7]                      ));
    Assert( 3 == Helper(Find,          [3, 4, 4]                      ));
    Assert( 1 == Helper(Find,          [1],                           ));
    Assert(-1 == Helper(Find,          [2, 2],                        ));
    Assert(-1 == Helper(Find,          [],                            ));
    Assert( 2 == Helper(FindRecursive, [1, 1, 2,  3,  3,  4,  4, 8, 8]));
    Assert(10 == Helper(FindRecursive, [3, 3, 7,  7, 10, 11, 11]      ));
    Assert( 7 == Helper(FindRecursive, [3, 3, 7, 10, 10, 11, 11]      ));
    Assert( 7 == Helper(FindRecursive, [3, 3, 7,  9,  9]              ));
    Assert( 7 == Helper(FindRecursive, [3, 3, 7]                      ));
    Assert( 3 == Helper(FindRecursive, [3, 4, 4]                      ));
    Assert( 1 == Helper(FindRecursive, [1],                           ));
    Assert(-1 == Helper(FindRecursive, [2, 2],                        ));
    Assert(-1 == Helper(FindRecursive, [],                            ));
    ret 0;
}
