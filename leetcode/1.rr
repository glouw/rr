# Given an array of integers nums and an integer target,
# return indices of the two numbers such that they add up to target.
#
# You may assume that each input would have exactly one solution,
# and you may not use the same element twice.
#
# You can return the answer in any order.

Key(number)
{
    ret "{0.0}" % [number];
}

# O(N) Time
# O(N) Space
TwoSum(array, target)
{
    have := {};
    index := 0;
    foreach(x : array)
    {
        want := target - x;
        found := have[Key(want)];
        if(found != null)
        {
            ret [found, index];
        }
        have[Key(x)] := index;
        index += 1;
    }
    ret null;
}

Main()
{
    Assert(TwoSum([2, 7, 11, 15], 9) == [0, 1]);
    Assert(TwoSum([3, 2, 4], 6) == [1, 2]);
    Assert(TwoSum([3, 3], 6) == [0, 1]);
    Assert(TwoSum([], 6) == null);
    Assert(TwoSum([], -1) == null);
    ret 0;
}
