# KTH SMALLEST ELEMENT IN A BST
# 
# Given the root of a binary search tree, and an integer k,
# return the kth smallest value (1-indexed) of all the
# values of the nodes in the tree.

inc lib.PQ;
inc lib.Tree;

Less(x, y)
{
    ret *x < *y;
}

Nodes()
{
    self := Tree_Node(5);
    self@r := Tree_Node(6);
    self@l := Tree_Node(3);
    self@l@r := Tree_Node(4);
    self@l@l := Tree_Node(2);
    self@l@l@l := Tree_Node(1);
    ret self;
}

Collect(self, pq)
{
    if(self == null)
    {
        ret;
    }
    else
    {
        PQ_Push(pq, self@value);
        Collect(self@l, pq);
        Collect(self@r, pq);
    }
}

KthSmallest(tree, k) # N LOGN
{
    pq := PQ(Less);
    Collect(tree, pq);
    for(i := 0; i < k - 1; i += 1)
    {
        PQ_Pop(pq);
    }
    ret pq.value[0];
}

Main()
{
    Assert(KthSmallest(Nodes(), 3) == 3);
    ret 0;
}
