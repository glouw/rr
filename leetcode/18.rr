# REMOVE NTH NODE FROM END OF LIST
# 
# Given the head of a linked list, remove the nth
# node from the end of the list and return its head.

Node(value)
{
    ret &{ .value : value, .next : null };
}

Push(nodes, node)
{
    node@next = nodes;
    nodes = node;
}

Populate(values)
{
    nodes := null;
    for(i := Len(values) - 1; i >= 0; i -= 1)
    {
        Push(nodes, Node(values[i]));
    }
    ret nodes;
}

Equal(a, b)
{
    x := a;
    y := b;
    while((x != null) && (y != null))
    {
        if(x@value != y@value)
        {
            ret false;
        }
        x = x@next;
        y = y@next;
        if((x != null) && (y == null))
        {
            ret false;
        }
        if((x == null) && (y != null))
        {
            ret false;
        }
    }
    ret true;
}

Size(nodes)
{
    size := 0;
    node := nodes;
    while(node != null)
    {
        size += 1;
        node = node@next;
    }
    ret size;
}

Dump(nodes)
{
    node := nodes;
    while(node != null)
    {
        Print(node@value);
        node = node@next;
    }
}

DelFromBack(nodes, from)
{
    size := Size(nodes);
    node := nodes;
    index := 0;
    end := size - from;
    prev := null;
    while(node != null)
    {
        if(index == end)
        {
            prev@next = node@next;
            break;
        }
        index += 1;
        prev = node;
        node = node@next;
    }
}

Test(a, b, from)
{
    x := Populate(a);
    y := Populate(b);
    DelFromBack(x, from);
    ret Equal(x, y);
}

Main()
{
    Assert(Test([0, 1, 2, 3, 4], [0, 1, 2, 3], 1) == true);
    Assert(Test([0, 1, 2, 3, 4], [0, 1, 2, 4], 2) == true);
    Assert(Test([0, 1, 2, 3, 4], [0, 1, 3, 4], 3) == true);
    Assert(Test([0, 1, 2, 3, 4], [0, 2, 3, 4], 4) == true);
    Assert(Test([0, 1], [0], 1) == true);
    Assert(Test([0, 1, 2, 3, 4], [0, 1, 2, 3, 4], 0) == true);
    Assert(Test([0, 1, 2, 3, 4], [0, 1, 2, 3, 4], 6) == true);
    ret 0;
}
