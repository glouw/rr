# ------------------------------
# Add Two Numbers 
# ------------------------------
#
# You are given two non-empty linked lists representing two
# non-negative integers.
#
# The digits are stored in reverse order and each of their
# nodes contain a single digit.
#
# Add the two numbers and return it as a linked list.
# 
# You may assume the two numbers do not contain any leading zero,
# except the number 0 itself.

BigNumSum(a, b)
{
    c := [];
    size := Max(Len(a), Len(b));
    carry := 0;
    for(i := 0; i < size; i += 1)
    {
        value := 0;
        if(i < Len(a))
        {
            value += a[i];
        }
        if(i < Len(b))
        {
            value += b[i];
        }
        value += carry;
        carry = Floor(value / 10);
        value = Floor(value % 10);
        c += value;
    }
    if(carry > 0)
    {
        c += carry;
    }
    ret c;
}

Main()
{
    Assert(BigNumSum([], []) == []);
    Assert(BigNumSum([2, 4, 3], [5, 6, 4]) == [7, 0, 8]);
    Assert(BigNumSum([1, 1, 1], [0]) == [1, 1, 1]);
    Assert(BigNumSum([0], [1, 1, 1]) == [1, 1, 1]);
    Assert(BigNumSum([9], [9]) == [8, 1]);
    Assert(BigNumSum([9, 9], [9, 9]) == [8, 9, 1]);
    ret 0;
}
