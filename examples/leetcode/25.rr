# CLONE GRAPH
# 
# Given a reference of a node in a connected undirected graph.
# Return a deep copy (clone) of the graph. Each node in the
# graph contains a value (int) and a list (List[Node]) of its neighbors.

Node(value)
{
    ret &{
        .value : value,
        .neighbors : [],
    };
}

Nodes()
{
    a := Node(1);
    b := Node(2);
    c := Node(3);
    d := Node(4);
    a@neighbors += b;
    b@neighbors += c;
    c@neighbors += d;
    d@neighbors += a;
    ret a;
}

Dup(nodes, visited)
{
    copy := Node(nodes@value);
    if(visited["{}" % [nodes]] == null)
    {
        visited["{}" % [nodes]] := true;
        foreach(neighbor : nodes@neighbors)
        {
            copy@neighbors += Dup(neighbor, visited);
        }
    }
    ret copy;
}

Validate(a, b)
{
    Assert(a@value == b@value);
    Assert((a@value ? b@value) == false);
    Assert(a != b);
    Assert((a ? b) == false);
}

Check(a, b, visited)
{
    if(visited["{}" % [a]] == null)
    {
        visited["{}" % [a]] := true;
        Validate(a, b);
        for(i := 0; i < Len(a@neighbors); i += 1)
        {
            Check(a@neighbors[i], b@neighbors[i], visited);
        }
    }
}

Main()
{
    nodes := Nodes();
    copy := Dup(nodes, {});
    Check(nodes, copy, {});
    ret 0;
}
