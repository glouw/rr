# REVERSE A LINKED LIST
#
# Given the head of a singly linked list,
# reverse the list, and return the reversed list.

Node(value)
{
    ret &{ .value : value, .next : null };
}

Push(nodes, node)
{
    node@next = nodes;
    nodes = node;
}

Reverse(nodes)
{
    rev := null;
    node := nodes;
    while(node != null)
    {
        Push(rev, Node(node@value));
        node = node@next;
    }
    ret rev;
}

Populate(with)
{
    nodes := null;
    for(i := Len(with) - 1; i >= 0; i -= 1)
    {
        Push(nodes, Node(with[i]));
    }
    ret nodes;
}

Equal(a, b)
{
    x := a;
    y := b;
    while((x != null) && (y != null))
    {
        if(x@value != y@value)
        {
            ret false;
        }
        x = x@next;
        y = y@next;
        if((x != null) && (y == null))
        {
            ret false;
        }
        if((x == null) && (y != null))
        {
            ret false;
        }
    }
    ret true;
}

Test(a, b)
{
    ret Equal(Reverse(Populate(a)), Populate(b));
}

Main()
{
    Assert(Test([0, 1, 2, 3   ], [3, 2, 1, 0    ]) == true);
    Assert(Test([0, 1, 2, 3   ], [3, 2, 1, 0, -1]) == false);
    Assert(Test([0, 1, 2, 3, 4], [3, 2, 1, 0    ]) == false);
    Assert(Test([], []) == true);
    Assert(Test([1], [1]) == true);
    Assert(Test([1, 2], [2, 1]) == true);
    ret 0;
}
