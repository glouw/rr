# MERGE K SORTED LISTS
# 
# You are given an array of k linked-lists lists,
# each linked-list is sorted in ascending order.
# 
# Merge all the linked-lists into one sorted
# linked-list and return it.

inc lib.List;

Build()
{
    a := List_Node(9);
    List_Push(a, List_Node(8));
    List_Push(a, List_Node(2));
    List_Push(a, List_Node(1));
    b := List_Node(8);
    List_Push(b, List_Node(4));
    List_Push(b, List_Node(2));
    List_Push(b, List_Node(1));
    c := List_Node(3);
    List_Push(c, List_Node(2));
    List_Push(c, List_Node(1));
    List_Push(c, List_Node(-1));
    ret [ a, b, c ];
}

Empty(list)
{
    empty := true;
    foreach(x : list)
    {
        empty = empty && (x == null);
    }
    ret empty;
}

Minim(list)
{
    min := 2147483647;
    index := 0;
    at := 0;
    foreach(x : list)
    {
        if(x != null)
        {
            if(x@value < min)
            {
                at = index;
                min = x@value;
            }
        }
        index += 1;
    }
    ret at;
}

Take(list)
{
    index := Minim(list);
    node := List_Pop(list[index]);
    node@next = null;
    ret node;
}

Dump(nodes)
{
    node := nodes;
    while(node != null)
    {
        Print(*node);
        node = node@next;
    }
}

Merge(list)
{
    out := null;
    last := null;
    while(!Empty(list))
    {
        if(out == null)
        {
            out = Take(list);
            last = &out@next;
        }
        else
        {
            *last = Take(list);
            last = &(*last)@next;
        }
    }
    ret out;
}

Verify(nodes, with)
{
    index := 0;
    for(node := nodes; node != null; node = node@next)
    {
        Assert(node@value == with[index]);
        index += 1;
    }
}

Main()
{
    Verify(Merge(Build()), [-1, 1, 1, 1, 2, 2, 2, 3, 4, 8, 8, 9]);
    ret 0; 
}
