# INVERT BINARY TREE

# Given the root of a binary tree, invert the tree,
# and return its root.

inc lib.Tree;

Swap(node, data)
{
    left := node@l;
    node@l = node@r;
    node@r = left;
}

Check(node, data)
{
    Assert(node@value == data[0]);
    Del(data, 0);
}

Iterate(nodes, exec, data)
{
    if(nodes != null)
    {
        exec(nodes, data);
        Iterate(nodes@l, exec, data);
        Iterate(nodes@r, exec, data);
    }
}

Nodes()
{
    nodes := Tree_Node(4);
    nodes@l = Tree_Node(2);
    nodes@l@l = Tree_Node(1);
    nodes@l@r = Tree_Node(3);
    nodes@r = Tree_Node(7);
    nodes@r@l = Tree_Node(6);
    nodes@r@r = Tree_Node(9);
    ret nodes;
}

Main()
{
    nodes := Nodes();
    Iterate(nodes, Swap, null);
    Iterate(nodes, Check, [4, 7, 9, 6, 2, 3, 1]);
    ret 0;
}
