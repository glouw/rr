# VALIDATE BINARY SEARCH TREE
#
# Given the root of a binary tree, determine if it is a valid binary search tree (BST).
# A valid BST is defined as follows:
#   * The left subtree of a node contains only nodes with keys less than the node's key.
#   * The right subtree of a node contains only nodes with keys greater than the node's key.
#   * Both the left and right subtrees must also be binary search trees.

inc lib.Tree;

Nodes()
{
    nodes := Tree_Node(5);
    nodes@l = Tree_Node(1);
    nodes@r = Tree_Node(4);
    nodes@r@l = Tree_Node(3);
    nodes@r@r = Tree_Node(6);
    ret nodes;
}

Valid(nodes)
{
    if(nodes == null)
    {
        ret true;
    }
    else
    {
        l := true;
        r := true;
        if(nodes@l != null)
        {
            l = nodes@l@value < nodes@value;
        }
        if(nodes@r != null)
        {
            r = nodes@r@value > nodes@value;
        }
        good := l && r;
        ret good && Valid(nodes@l);
        ret good && Valid(nodes@r);
    }
}

Main()
{
    Assert(Valid(Nodes()) == false);
    ret 0;
}
