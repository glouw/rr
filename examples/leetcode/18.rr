# REMOVE NTH NODE FROM END OF LIST
# 
# Given the head of a linked list, remove the nth
# node from the end of the list and return its head.

inc lib.List;

Populate(values)
{
    nodes := null;
    for(i := Len(values) - 1; i >= 0; i -= 1)
    {
        List_Push(nodes, List_Node(values[i]));
    }
    ret nodes;
}

DelFromBack(nodes, from)
{
    if(from > 0)
    {
        fast := nodes;
        slow := nodes;
        for(index := 0; index < from; index += 1)
        {
            if(fast == null)
            {
                ret; # FAST FORWARDED PAST END OF TAPE.
            }
            fast = fast@next;
        }
        if(fast == null)
        {
            nodes = nodes@next; # REMOVING ZEROTH ELEMENT.
        }
        else
        {
            while(fast@next != null)
            {
                fast = fast@next;
                slow = slow@next;
            }
            slow@next = slow@next@next;
        }
    }
}

Test(a, b, from)
{
    x := Populate(a);
    y := Populate(b);
    DelFromBack(x, from);
    ret List_Equal(x, y);
}

Main()
{
    Assert(Test([0, 1, 2, 3, 4], [0, 1, 2, 3], 1) == true);
    Assert(Test([0, 1, 2, 3, 4], [0, 1, 2, 4], 2) == true);
    Assert(Test([0, 1, 2, 3, 4], [0, 1, 3, 4], 3) == true);
    Assert(Test([0, 1, 2, 3, 4], [0, 2, 3, 4], 4) == true);
    Assert(Test([0, 1, 2, 3, 4], [1, 2, 3, 4], 5) == true);
    Assert(Test([0, 1], [1], 2) == true);
    Assert(Test([0], [], 1) == true);
    Assert(Test([], [], 1) == true);
    Assert(Test([0, 1, 2, 3, 4], [0, 1, 2, 3, 4], 0) == true);
    Assert(Test([0, 1, 2, 3, 4], [0, 1, 2, 3, 4], 6) == true);
    ret 0;
}
