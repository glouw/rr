# CHORDMAN takes a JSON of chord progressions
# and outputs a text file containing said progressions
# and every chord inversion.

ToTab(queue)
{
    str := "\t\t";
    index := 0;
    foreach(elem : queue)
    {
        str += "{3}" % [elem];
        index += 1;
    }
    ret str;
}

Flatten(queue)
{
    str := "";
    foreach(elem : queue)
    {
        str += elem + " ";
    }
    ret str;
}

File_Value(file)
{
    ret Value(Read(file, Len(file)));
}

Data()
{
    fa := Open("Tabs.json", "r");
    fb := Open("Prog.json", "r");
    fc := Open("chordman.txt", "w");
    Assert(Good(fa));
    Assert(Good(fb));
    Assert(Good(fc));
    ret {
        .tabs : File_Value(fa),
        .prog : File_Value(fb),
        .save : fc,
    };
}

Data_Process(self)
{
    index := 0;
    foreach(prog : self.prog)
    {
        Write(self.save, "Progression {.0} : {}\n" % [index, Flatten(prog)]);
        foreach(chord : prog)
        {
            Write(self.save, "\t{}\n" % [chord]);
            tab := self.tabs[chord];
            foreach(map : tab)
            {
                Write(self.save, ToTab(map.positions) + "\n");
            }
        }
        index += 1;
        Write(self.save, "\n");
    }
}

Main()
{
    const data $= Data();
    Data_Process(data);
    ret 0;
}
